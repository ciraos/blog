{"meta":{"title":"葱苓","subtitle":"a small blog station","description":"葱苓","author":"葱苓Ciraos","url":"https://blog.ciraos.top","root":"/"},"pages":[{"title":"","date":"2024-01-07T15:38:53.857Z","updated":"2024-01-07T15:38:53.857Z","comments":true,"path":"404.html","permalink":"https://blog.ciraos.top/404","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2024-01-07T15:38:53.857Z","updated":"2024-01-07T15:38:53.857Z","comments":true,"path":"assets/custom.css","permalink":"https://blog.ciraos.top/assets/custom.css","excerpt":"","text":"/* * custom.css */ /*? */ :root { --miku-green: #36C5BB; } /*? */ /* #welcome-info {white-space: pre-wrap;border-radius: 14px;--kouseki-welcome-color: #49B1F5;--kouseki-ip-color: #49B1F5;--kouseki-gl-size: 16px !important;} */ /*? */ body { scroll-behavior: smooth; } /*? */ /* [data-theme='dark'] #footer {} */ /*? */ /* #footer {} */ /*? 首页头图加载 */ .pl-container { width: 100%; height: 100%; z-index: -2; position: fixed; overflow: hidden; will-change: transform; /* 添加性能优化 */ animation: blur-to-clear 2s cubic-bezier(.62, .21, .25, 1) 0s 1 normal backwards running, scale 1.5s cubic-bezier(.62, .21, .25, 1) 0s 1 both; } .pl-img { width: 100%; height: 100%; position: absolute; background-position: center; background-size: cover; background-repeat: no-repeat; opacity: 0; transition: opacity 1s; } @keyframes blur-to-clear { 0% { filter: blur(50px); opacity: 1; } 100% { filter: blur(0); opacity: 1; } } @keyframes scale { 0% { transform: scale(1.5) translateZ(0); opacity: 0; } to { transform: scale(1) translateZ(0); opacity: 1; } } .pl-visible { opacity: 1; } .pl-blur { /* 小图锯齿多，增加高斯模糊 */ filter: blur(50px); } /*? twikoo评论区 */ /*? */ /* .menus_item_child {display: flex;flex-direction: column;border-radius: 10px !important;} */ /* .menus_item_child>li:first-child {} */ /* .menus_item_child>li:last-child {} */"},{"title":"","date":"2024-01-07T15:38:53.857Z","updated":"2024-01-07T15:38:53.857Z","comments":true,"path":"assets/custom.js","permalink":"https://blog.ciraos.top/assets/custom.js","excerpt":"","text":"/* * custom.js */ /* * 首页一图流加载优化 * @description 实现medium的渐进加载背景的效果 */ (function () { class ProgressiveLoad { constructor(smallSrc, largeSrc) { this.smallSrc = smallSrc; this.largeSrc = largeSrc; this.initTpl(); this.container.addEventListener('animationend', () => { this.smallStage.style.display = 'none'; }, { once: true }); } initTpl() { this.container = document.createElement('div'); this.smallStage = document.createElement('div'); this.largeStage = document.createElement('div'); this.smallImg = new Image(); this.largeImg = new Image(); this.container.className = 'pl-container'; this.smallStage.className = 'pl-img pl-blur'; this.largeStage.className = 'pl-img'; this.container.appendChild(this.smallStage); this.container.appendChild(this.largeStage); this.smallImg.onload = this._onSmallLoaded.bind(this); this.largeImg.onload = this._onLargeLoaded.bind(this); } progressiveLoad() { this.smallImg.src = this.smallSrc; this.largeImg.src = this.largeSrc; } _onLargeLoaded() { this.largeStage.classList.add('pl-visible'); this.largeStage.style.backgroundImage = `url('${this.largeSrc}')`; } _onSmallLoaded() { this.smallStage.classList.add('pl-visible'); this.smallStage.style.backgroundImage = `url('${this.smallSrc}')`; } } const executeLoad = (config, target) => { console.log('执行渐进背景替换'); const isMobile = window.matchMedia('(max-width: 767px)').matches; const loader = new ProgressiveLoad( isMobile ? config.mobileSmallSrc : config.smallSrc, isMobile ? config.mobileLargeSrc : config.largeSrc ); if (target.children[0]) { target.insertBefore(loader.container, target.children[0]); } loader.progressiveLoad(); }; const ldconfig = { light: { smallSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/mountains.webp', //浅色模式 小图链接 尽可能配置小于100k的图片 largeSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyub.webp', //浅色模式 大图链接 最终显示的图片 mobileSmallSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyu0.webp', //手机端浅色小图链接 尽可能配置小于100k的图片 mobileLargeSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyu1.webp', //手机端浅色大图链接 最终显示的图片 enableRoutes: ['/'], }, dark: { smallSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/mountains.webp', //深色模式 小图链接 尽可能配置小于100k的图片 largeSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyud.webp', //深色模式 大图链接 最终显示的图片 mobileSmallSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyu0.webp', //手机端深色模式小图链接 尽可能配置小于100k的图片 mobileLargeSrc: 'https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/indeximg/ganyu1.webp', //手机端深色大图链接 最终显示的图片 enableRoutes: ['/'], }, }; const getCurrentTheme = () => { return document.documentElement.getAttribute('data-theme'); } const onThemeChange = () => { const currentTheme = getCurrentTheme(); const config = ldconfig[currentTheme]; initProgressiveLoad(config); document.addEventListener(\"DOMContentLoaded\", function () { initProgressiveLoad(config); }); document.addEventListener(\"pjax:complete\", function () { onPJAXComplete(config); }); } let initTheme = getCurrentTheme(); let initConfig = ldconfig[initTheme]; initProgressiveLoad(initConfig); const observer = new MutationObserver(mutations => { mutations.forEach(mutation => { if (mutation.attributeName === \"data-theme\" && location.pathname === '/') { onThemeChange(); } }); }); observer.observe(document.documentElement, { attributes: true, attributeFilter: [\"data-theme\"] }); function initProgressiveLoad(config) { const container = document.querySelector('.pl-container'); if (container) { container.remove(); } const target = document.getElementById('page-header'); if (target && target.classList.contains('full_page')) { executeLoad(config, target); } } function onPJAXComplete(config) { const target = document.getElementById('page-header'); if (target && target.classList.contains('full_page')) { initProgressiveLoad(config); } } })();"},{"title":"分类","date":"2023-06-21T05:46:11.000Z","updated":"2023-06-21T05:46:11.000Z","comments":false,"path":"categories/index.html","permalink":"https://blog.ciraos.top/categories/","excerpt":"","text":""},{"title":"原神","date":"2023-06-30T03:49:18.000Z","updated":"2023-06-30T03:49:18.000Z","comments":true,"path":"album-genshin/index.html","permalink":"https://blog.ciraos.top/album-genshin/","excerpt":"","text":""},{"title":"标签","date":"2023-06-21T05:41:00.000Z","updated":"2023-06-21T05:41:00.000Z","comments":false,"path":"tags/index.html","permalink":"https://blog.ciraos.top/tags/","excerpt":"","text":""},{"title":"追剧","date":"2023-06-22T08:15:18.000Z","updated":"2023-06-22T08:15:18.000Z","comments":true,"path":"cinema/index.html","permalink":"https://blog.ciraos.top/cinema/","excerpt":"","text":""},{"title":"追番","date":"2023-03-01T04:29:39.000Z","updated":"2023-03-01T04:29:39.000Z","comments":true,"path":"bangumis/index.html","permalink":"https://blog.ciraos.top/bangumis/","excerpt":"","text":""},{"title":"关于我","date":"2023-06-22T13:40:14.000Z","updated":"2023-06-22T13:40:14.000Z","comments":false,"path":"about/index.html","permalink":"https://blog.ciraos.top/about/","excerpt":"","text":""},{"title":"友人帐","date":"2023-06-21T05:51:24.000Z","updated":"2023-06-21T05:51:24.000Z","comments":false,"path":"friends/index.html","permalink":"https://blog.ciraos.top/friends/","excerpt":"","text":"通知约法三章我的信息bf、md、anzhiyu主题vlts主题已经停止添加友链，已经添加过的友链可以forkGithub仓库，然后提交pr的方式进行修改。由于工作原因，实在不想管友链了。当然如果你还想加的话，就请移步上面的链接，谢谢！ 因为我的网站经常炸掉，所以我建议你的链接不要挂掉哦； 网站必须有强制https协议头； 添加之前请先添加我的博客为友链； 博客内容与生活、科技等等有关，请勿上传违法大陆法律、法规的内容； 待补充。。。 12345名称: 葱苓sama链接: https://blog.ciraos.top头像: https://img01.anheyu.com/useruploads/222/2023/10/16/652cbfc482491.jpg描述: &quot;Don&#x27;t worry, Be happy.&quot;网站截图: https://img01.anheyu.com/useruploads/222/2023/10/18/652fdf0738617.png12345- name: 葱苓sama link: https://blog.ciraos.top avatar: https://img01.anheyu.com/useruploads/222/2023/10/16/652cbfc482491.jpg descr: &quot;Don&#x27;t worry, Be happy.&quot; siteshot: https://img01.anheyu.com/useruploads/222/2023/10/18/652fdf0738617.png12345- title: 葱苓sama url: https://blog.ciraos.top avatar: https://img01.anheyu.com/useruploads/222/2023/10/16/652cbfc482491.jpg description: &quot;Don&#x27;t worry, Be happy.&quot; screenshot: https://img01.anheyu.com/useruploads/222/2023/10/18/652fdf0738617.png"},{"title":"朋友圈","date":"2023-06-23T15:41:39.000Z","updated":"2023-06-23T15:41:39.000Z","comments":false,"path":"fcircle/index.html","permalink":"https://blog.ciraos.top/fcircle/","excerpt":"","text":""},{"title":"相册集","date":"2023-06-30T03:43:44.000Z","updated":"2023-06-30T03:43:44.000Z","comments":true,"path":"album/index.html","permalink":"https://blog.ciraos.top/album/","excerpt":"","text":""},{"title":"音乐馆","date":"2024-01-05T01:17:45.000Z","updated":"2024-01-05T01:17:45.000Z","comments":false,"path":"music/index.html","permalink":"https://blog.ciraos.top/music/","excerpt":"","text":""},{"title":"初音未来","date":"2023-06-30T04:19:33.000Z","updated":"2023-06-30T04:19:33.000Z","comments":true,"path":"album-miku/index.html","permalink":"https://blog.ciraos.top/album-miku/","excerpt":"","text":""},{"title":"版权协议","date":"2023-07-26T02:05:43.000Z","updated":"2023-07-26T02:05:43.000Z","comments":true,"path":"copyright/index.html","permalink":"https://blog.ciraos.top/copyright/","excerpt":"","text":"空。"},{"title":"隐私协议","date":"2023-11-15T03:22:05.000Z","updated":"2023-11-15T03:22:05.000Z","comments":true,"path":"privacy/index.html","permalink":"https://blog.ciraos.top/privacy/","excerpt":"","text":"空。"},{"title":"coser","date":"2023-07-25T08:24:20.000Z","updated":"2023-07-25T08:24:20.000Z","comments":true,"path":"album-coser/index.html","permalink":"https://blog.ciraos.top/album-coser/","excerpt":"","text":""},{"title":"essay","date":"2023-06-21T05:46:55.000Z","updated":"2023-06-21T05:46:55.000Z","comments":true,"path":"essay/index.html","permalink":"https://blog.ciraos.top/essay/","excerpt":"","text":""},{"title":"cookies","date":"2023-11-15T03:24:27.000Z","updated":"2023-11-15T03:24:27.000Z","comments":true,"path":"cookies/index.html","permalink":"https://blog.ciraos.top/cookies/","excerpt":"","text":"空。"},{"title":"comments","date":"2023-06-23T04:37:47.000Z","updated":"2023-06-23T04:37:47.000Z","comments":true,"path":"comments/index.html","permalink":"https://blog.ciraos.top/comments/","excerpt":"","text":""},{"title":"便携小空调 - 为你的夏日带去清凉!","date":"2023-06-27T10:00:34.000Z","updated":"2023-06-27T10:00:34.000Z","comments":false,"path":"air-conditioner/index.html","permalink":"https://blog.ciraos.top/air-conditioner/","excerpt":"","text":"终于为博客安装上了便携小空调 .copyright-box a { border-bottom: none !important; padding: 0 !important; }"}],"posts":[{"title":"给你的博客加上git提交日历","slug":"add-a-git-calendar","date":"2023-11-03T01:14:12.000Z","updated":"2023-11-03T01:14:12.000Z","comments":true,"path":"p/e3901a78/","link":"","permalink":"https://blog.ciraos.top/p/e3901a78/","excerpt":"","text":"预览 TodoGitCalendar原文-小冰老师 其实很简单，我们先下载一个插件： 12345npm i hexo-githubcalendar --save# 或者cnpm i hexo-githubcalendar --save 然后在hexo配置文件_config.yml内增加配置项： 1234567891011121314151617181920# Ice Kano Plus_in# Hexo Github Canlendar# Author: Ice Kano# Modify: Lete乐特githubcalendar: enable: true enable_page: / user: zfour layout: type: id name: recent-posts index: 0 githubcalendar_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27; pc_minheight: 280px mobile_minheight: 0px color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; api: https://python-github-calendar-api.vercel.app/api # api: https://python-gitee-calendar-api.vercel.app/api calendar_js: https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js plus_style: &quot;&quot; 其中， enable: true&#x2F;false 是否开启插件 enable_page: 路由地址，如 &#x2F; 代表主页。&#x2F;me&#x2F; 代表自我介绍页等等 user: 你的github或gitee用户名 layout: 具体不做阐述，详细可去小冰老师的博客查看，如果想和我一样放在首页的话，那么layout这一块就保持默认的就好。 githubcalendar_html: html 模板字段，包含 loading，和挂载容器 pc_minheight: （略） mobile_minheight: （略） color: 冰老师为我们提供了四种颜色可供选择：12345# 以下色调选择喜欢的一行保留即可。其余注释。—————akilar的糖果色color: &quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot; #橘黄色调# color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调# color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调# color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调 api: 这里可以用我的api：https://gitcalendar.ciraos.top/api，自己想的话也可以去仓库自己fork部署。 calendar_js: （略） plus_style: （略） 接下来hexo三连即可！","categories":[{"name":"git","slug":"git","permalink":"https://blog.ciraos.top/categories/git/"},{"name":"git日历","slug":"git/git日历","permalink":"https://blog.ciraos.top/categories/git/git%E6%97%A5%E5%8E%86/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.ciraos.top/tags/git/"},{"name":"git日历","slug":"git日历","permalink":"https://blog.ciraos.top/tags/git%E6%97%A5%E5%8E%86/"}]},{"title":"hexo后台Qexo保姆版搭建教程","slug":"hexobackend-qexo","date":"2023-08-25T12:12:00.000Z","updated":"2023-08-25T12:12:00.000Z","comments":true,"path":"p/40c6cc63/","link":"","permalink":"https://blog.ciraos.top/p/40c6cc63/","excerpt":"","text":"如果您正在读这篇文章，或者您有部署qexo的打算，那么，可能需要这么一点门槛，需要你的博客部署了GITHUB ACTIONS，如果没有的话，请先移步使用Github Action实现全自动部署完成Github Actions的配置。 然后再来部署此文档。 预览官方文档：qexo官方文档 QexoQexo TO DO&nbsp;&nbsp;&nbsp;&nbsp; Mongodb数据库Mongodb数据库Mongodb数据库 &nbsp;&nbsp;&nbsp;&nbsp;首先去官网注册页面注册一下自己的账号， &nbsp;&nbsp;&nbsp;&nbsp;注册好之后登录，应该是如下界面（如果不是，记得点一下左上角的图标）： &nbsp;&nbsp;&nbsp;&nbsp;点击New Project新建一个项目： &nbsp;&nbsp;&nbsp;&nbsp;,我们把它命名为qexo，然后点击next： &nbsp;&nbsp;&nbsp;&nbsp;然后这里让我们添加成员和设置权限，不过我们不用管，直接Create Project： &nbsp;&nbsp;&nbsp;&nbsp;这时，我们就设置好了&nbsp;&nbsp;&nbsp;&nbsp;然后点击Create，再新建一个东西（我不知道它叫啥）: &nbsp;&nbsp;&nbsp;&nbsp;然后按照如下图操作，&nbsp;&nbsp;&nbsp;&nbsp;选择free-&gt;Provider选择aws-&gt;region选择&quot;AWS / N. Virginia (us-east-1)&quot;-&gt;Name随意起啥都行-&gt;最后点击create： &nbsp;&nbsp;&nbsp;&nbsp;然后我们来到下一个配置界面：&nbsp;&nbsp;&nbsp;&nbsp;这里的用户名和密码随意填写，但是自己一定一定一定要记住！，密码可以用mongodb自带的自动生成密码： &nbsp;&nbsp;&nbsp;&nbsp;OK了之后，点击Create User，来到下一步：&nbsp;&nbsp;&nbsp;&nbsp;这里它会自动生成我们的ip，不过直接点击后面的remove就可以，我们不是用这个ip。然后我们在IP Address里面填0.0.0.0/0,description填all，就可以，然后点击Add Entry。 &nbsp;&nbsp;&nbsp;&nbsp;哒哒哒，就像这样子，然后就大功告成啦，我们点击最下面的Finish and Close， &nbsp;&nbsp;&nbsp;&nbsp;然后会出现一个弹窗，我们点击绿色的Go To Overview： &nbsp;&nbsp;&nbsp;&nbsp;OK！这就是成功的界面啦， &nbsp;&nbsp;&nbsp;&nbsp;接下来让我们记下mognodb数据库的连接代码： &nbsp;&nbsp;&nbsp;&nbsp;点击connect，再点击Drivers： &nbsp;&nbsp;&nbsp;&nbsp;点击右边的复制图标，这就是我们需要的mongodb代码啦，我们把它保存下来，然后把里面的&lt;password&gt;换成之前生成的密码， Github + vercel后台配置一键部署 &nbsp;&nbsp;&nbsp;&nbsp;首次部署会报错, 请无视并重新进入项目, 在项目设置界面添加环境变量Environment Variables： 名称 意义 示例 MONGODB_HOST MongoDB 数据库连接地址 mongodb+srv:&#x2F;&#x2F;cluster0.xxxx.mongodb.net MONGODB_PORT MongoDB 数据库通信端口 默认应填写 27017 27017 MONGODB_USER MongoDB 数据库用户名 ciraos MONGODB_DB MongoDB 数据库名 qexo MONGODB_PASS MongoDB 数据库密码 pwd &nbsp;&nbsp;&nbsp;&nbsp;按照如下图示依次填写环境变量（每项都要填写）： &nbsp;&nbsp;&nbsp;&nbsp;完成之后应该是这个样子： &nbsp;&nbsp;&nbsp;&nbsp;在Deployments点击Redeploy开始部署, 若没有Error信息即可打开域名进入初始化引导。 Qexo网页配置前端配置咕咕咕","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/categories/hexo/"},{"name":"Qexo后台","slug":"hexo/Qexo后台","permalink":"https://blog.ciraos.top/categories/hexo/Qexo%E5%90%8E%E5%8F%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/tags/hexo/"},{"name":"Qexo后台","slug":"Qexo后台","permalink":"https://blog.ciraos.top/tags/Qexo%E5%90%8E%E5%8F%B0/"}]},{"title":"手抄CPrimerPlus之第3章-数据和c","slug":"CPrimerPlus-3-d数据和C","date":"2023-07-02T14:48:47.000Z","updated":"2024-01-01T12:22:00.000Z","comments":true,"path":"p/183616c6/","link":"","permalink":"https://blog.ciraos.top/p/183616c6/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;程序里不开数据。把数字、字母和文字输入计算机，就是希望它利用这些数据完成某些任务。例如，需要计算一份利息或显示一份葡萄酒商的排序列表。本章除了介绍如何读取数据外，还将教会读者如何操控数据。&nbsp;&nbsp;&nbsp;&nbsp;语言提供两大系列的多种数据类型。本章详细介绍两大数据类型：整数类型和浮点数类型，讲解这些数据类型是什么、如何声明它们、如何以及何时使用它们。除此之外，还将介绍常量和变量的区别。读者很快就能看到第Ⅰ个交互式程序。 示例程序&nbsp;&nbsp;&nbsp;&nbsp;本章仍从一个简单的程序开始。如果发现有不熟悉的内容，别担心，我们稍后会详细解释。该程序的意图比较明了，请试着编译并运行程序清单3.1中的源代码。为了节省时间，在输入源代码时可省略注释。 12345678910111213141516171819202122#include &lt;stdio.h&gt;int main()&#123; float weight; /* 你的体重 */ float value; /* 相等重量的白金价值 */ printf ( &quot;Are you worth your weight in platinum? \\n&quot; ); printf ( &quot;Let&#x27;s check it out. \\n&quot; ) ; printf ( &quot;Please enter your weight in pounds: &quot; ) ; /* 加获取用户的输入 */ scanf (&quot;%f&quot;,&amp;weight ) ; /* 假设白金的价格是每盎司$1700 */ /* 14.5833 用于把英镑常衡盎司转换为金衡盎司 */ value = 1700.0 * weight* 14.5833; printf (&quot;Your weight in platinum is worth $%.2f.\\n&quot;, value) ; printf(&quot;You are easily worth that! If platinum prices drop,\\n&quot;); printf ( &quot;eat more to maintain your value. \\n&quot; ); return 0 ;&#125; 提示错误与警告如果输入程序时打错（如，漏了一个分号），编译器会报告语法错误消息。然而，即使输入正确无误，编译器也可能给出一些警告，如“警告：从double类型转换成float类型可能会丢失数据”。错误消息表明程序中有错，不能进行编译。而警告则表明，尽管编写的代码有效，但可能不是程序员想要的。警告并不终止编译。特殊的警告与C如何处理1700.0这样的值有关。本例不必理会这个问题，本章稍后会进一步说明。 &nbsp;&nbsp;&nbsp;&nbsp;输入该程序时，可以把1700.0改成贵金属白金当前的市价，但是不要改动14.5833，该数是Ⅰ英镑的金衡盎司数（金衡盎司用于衡量贵金属，而英镑常衡盎司用于衡量人的体重）。 &nbsp;&nbsp;&nbsp;&nbsp;注意，“enter your weight”的意思是输入你的体重，然后按下 Enter或Return键（不要键入体重后就一直等着）。按下Enter键是告知计算机,你已完成输入数据。该程序需要你输入一个数字(如,155),而不是单词(如，too much)。如果输入字母而不是数字，会导致程序出问题。这个问题要用if 语句来解决（详见第7章），因此请先输入数字。下面是程序的输出示例:Are you worth your weight in platinum ?Let’s check it out.Please enter your weight in pounds: 156Your weight in platinum is worth $3867491.25.You are easily worth that! If platinum prices drop,eat more to maintain your value. 程序调整 即使用第2章介绍的方法，在程序中添加下面一行代码： getchar(); 程序的输出是否依旧在屏幕上一闪而过？本例，需要调用两次getchar ()函数： 12getchar();getchar(); getchar();函数读取下一个输入字符，因此程序会等待用户输入。在这种情况下，键入156并按下 Enter(或Return )键(发送一个换行符)，然后scanf()读取键入的数字，第1个getchar();读取换行符，第2个getchar()让程序暂停，等待输入。 程序中的新元素&nbsp;&nbsp;&nbsp;&nbsp; 注意，代码中使用了一种新的变量声明。前面的例子中只使用了整数类型的变量(int)，但是本例使用了浮点数类型(float)的变量，以便处理更大范围的数据。float类型可以储存带小数的数字。 程序中演示了常量的几种新写法。现在可以使用带小数点的数了。 为了打印新类型的变量，在printf()中使用%f来处理浮点值。%.2f中的.2用于精确控制输出，指定输出的浮点数只显示小数点后面两位。 scanf()函数用于读取键盘的输入。%f说明scanf()要读取用户从键盘输入的浮点数，&amp;weight告诉scanf()把输入的值赋给名为 weight 的变量。scanf()函数使用s符号表明找到weight变量的地点。下一章将详细讨论&amp;。就目前而言，请按照这样写。 也许本程序最突出的新特点是它的交互性。计算机向用户询问信息，然后用户输入数字。与非交互式程序相比，交互式程序用起来更有趣。更重要的是，交互式使得程序更加灵活。例如，示例程序可以使用任何合理的体重，而不只是156磅。不必重写程序，就可以根据不同体重进行计算。scanf()和printf()函数用于实现这种交互。scanf()函数读取用户从键盘输入的数据，并把数据传递给程序; printf()函数读取程序中的数据，并把数据显示在屏幕上。把两个函数结合起来，就可以建立人机双向通信（见(3.1)，这让使用计算机更加饶有趣味。 &nbsp;&nbsp;&nbsp;&nbsp;本章着重解释上述新特性中的前两项:各种数据类型的变量和常量。第4章将介绍后3项。 变量与常量数据&nbsp;&nbsp;&nbsp;&nbsp;在程序的指导下，计算机可以做许多事情，如数值计算、名字排序、执行语言或视频命令、计算彗星轨道、准备邮件列表、拨电话号码、画画、做决策或其他你能想到的事情。要完成这些任务，程序需要使用数据，即承载信息的数字和字符。有些数据类型在程序使用之前已经预先设定好了，在整个程序的运行过程中没有变化，这些称为常量(constant)。其他数据类型在程序运行期间可能会改变或被赋值，这些称为变量(variable)。在示例程序中，weight 是一个变量，14.5833是一个常量。那么，1700.0是常量还是变量?在现实生活中，白金的价格不会是常量，但是在程序中，像1700.0这样的价格被视为常量。 数据：数据类型关键字&nbsp;&nbsp;&nbsp;&nbsp;不仅变量和常量不同，不同的数据类型之间也有差异。一些数据类型表示数字，一些数据类型表示字母（更普遍地说是字符）。C通过识别一些基本的数据类型来区分和使用这些不同的数据类型。如果数据是常量，编译器一般通过用户书写的形式来识别类型(如，42是整数，42.100是浮点数)。但是，对变量而言，要在声明时指定其类型。稍后会详细介绍如何声明变量。现在，我们先来了解一下∈语言的基本类型关键字。K&amp;C给出了7个与类型相关的关键字。C90标准添加了2个关键字，C99标准又添加了3个关键字(见表3.1)。 最初K&amp;R给出的关键字 C90标准添加的关键字 C99标准添加的关键字 int signed _Bool long void _Complex short _Imaginary unsigned char float double &nbsp;&nbsp;&nbsp;&nbsp;在C语言中，用int关键字来表示基本的整数类型。后3个关键字(long、short和 unsigned)和C90新增的signed用于提供基本整数类型的变式，例如 unsigned short int和 long long int。char关键字用于指定字母和其他字符(如，#、$、%和*)。另外， char类型也可以表示较小的整数。float、double和long double表示带小数点的数。_Bool类型表示布尔值(true或false)，_complex和_Imaginary分别表示复数和虚数。&nbsp;&nbsp;&nbsp;&nbsp;通过这些关键字创建的类型，按计算机的储存方式可分为两大基本类型:整数类型和浮点数类型。 位、字节和字 &nbsp;&nbsp;&nbsp;&nbsp;位、字节和字是描述计算机数据单元或存储单元的术语。这里主要指存储单元。 &nbsp;&nbsp;&nbsp;&nbsp;最小的存储单元是位(bit )，可以储存0或1（或者说，位用于设置“开”或“关”）。虽然1位储存的信息有限，但是计算机中位的数量十分庞大。位是计算机内存的基本构建块。 &nbsp;&nbsp;&nbsp;&nbsp;字节 ( byte)是常用的计算机存储单位。对于几乎所有的机器，1字节均为8位。这是字节的标准定义，至少在衡量存储单位时是这样（但是，C语言对此有不同的定义，请参阅本章3.4.3节）。既然1位可以表示0或1，那么8位字节就有256(2的8次方)种可能的0、1的组合。通过二进制编码(仅用0和Ⅰ便可表示数字)，便可表示0~255的整数或一组字符(第l5章将详细讨论二进制编码，如果感兴趣可以现在浏览一下该章的内容). &nbsp;&nbsp;&nbsp;&nbsp;字( word)是设计计算机时给定的自然存储单位。对于8位的微型计算机（如，最初的苹果机）l个字长只有8位。从那以后，个人计算机字长增至l6位、32位，直到目前的64位。计算机的字长越大，其数据转移越快，允许的内存访问也更多。 整数类型和浮点数&nbsp;&nbsp;&nbsp;&nbsp;整数类型?浮点数类型?如果觉得这些术语非常陌生，别担心，下面先简述它们的含义。如果不熟悉位、字节和字的概念，请阅读上面方框中的内容。刚开始学习时，不必了解所有的细节，就像学习开车之前不必详细了解汽车内部引擎的原理一样。但是，了解一些计算机或汽车引擎内部的原理会对你有所帮助。&nbsp;&nbsp;&nbsp;&nbsp;对我们而言，整数和浮点数的区别是它们的书写方式不同。对计算机而言，它们的区别是储存方式不同。下面详细介绍整数和浮点数。 整数&nbsp;&nbsp;&nbsp;&nbsp;和数学的概念一样，在C语言中，整数是没有小数部分的数。例如，2、-23和2456都是整数。而3.14、0.22和2.000都不是整数。计算机以二进制数字储存整数，例如，整数7以二进制写是111。因此，要在8位字节中储存该数字，需要把前5位都设置成0，后3位设置成1(如图3.2所示)。 浮点数&nbsp;&nbsp;&nbsp;&nbsp;浮点数与数学中实数的概念差不多。2.75、3.16E7、7.00和2e-8都是浮点数。注意，在一个值后面加上一个小数点，该值就成为一个浮点值。所以，7是整数，7.00 是浮点数。显然，书写浮点数有多种形式。稍后将详细介绍e记数法，这里先做简要介绍: 3.16E7表示 3.16×10’(3.16乘以10的7次方)。其中，10&#x3D;10000000，7被称为10的指数。&nbsp;&nbsp;&nbsp;&nbsp;这里关键要理解浮点数和整数的储存方案不同。计算机把浮点数分成小数部分和指数部分来表示，而且分开储存这两部分。因此，虽然7.00和7在数值上相同，但是它们的储存方式不同。在十进制下，可以把7.0写成0.7E1。这里，0.7是小数部分，1是指数部分。图3.3演示了一个储存浮点数的例子。当然，计算机在内部使用二进制和2的幂进行储存，而不是10的幂。第15章将详述相关内容。现在，我们着重讲解这两种类型的实际区别。 整数没有小数部分，浮点数有小数部分。 浮点数可以表示的范围比整数大。参见本章末的表3.3。 对于一些算术运算（如，两个很大的数相减），浮点数损失的精度更多。 C语言基本数据类型&nbsp;&nbsp;&nbsp;&nbsp;本节将详细节介绍C语言的基本数据类型，包括如何声明变量、如何表示字面值常量(如，5或2.78),以及典型的用法。一-些老式的∈语言编译器无法支持这里提到的所有类型，请查阅你使用的编译器文档，了解可以使用哪些类型。 int类型&nbsp;&nbsp;&nbsp;&nbsp;C 语言提供了许多整数类型，为什么一种类型不够用？因为C语言让程序员针对不同情况选择不同的类型。特别是C语言中的整数类型可表示不同的取值范围和正负值。一般情况使用int类型即可，但是为满足特定任务和机器的要求，还可以选择其他类型。 &nbsp;&nbsp;&nbsp;&nbsp;int类型是有符号整型，即int类型的值必须是整数，可以是正整数、负整数或零。其取值范围依计算机系统而异。一般而言，储存一个int要占用一个机器字长。因此，早期的16位IBM PC兼容机使用16位来储存一个int值，其取值范围(即nt 值的取值范围)是-3278~32767。目前的个人计算机-般是32位，因此用32位储存一个int 值。现在，个人计算机产业正逐步向着64位处理器发展，自然能储存更大的整数。ISOC规定int的取值范围最小为-3276832767。一般而言，系统用一个特殊位的值表示有符号整数的正负号。第15章将介绍常用的方法。 声明int变量&nbsp;&nbsp;&nbsp;&nbsp;第2章中已经用 int 声明过基本整型变量。先写上int，然后写变量名，最后加上一个分号。要声明多个变量，可以单独声明每个变量，也可在 int 后面列出多个变量名，变量名之间用号分隔。下面都是有效的声明: 12int erns;int hogs，cows， goats; &nbsp;&nbsp;&nbsp;&nbsp;可以分别在 4条声明中声明各变量，也可以在一条声明中声明4个变量。两种方法的效果相同，都为4个int大小的变量赋予名称并分配内存空间。&nbsp;&nbsp;&nbsp;&nbsp;以上声明创建了变量，但是并没有给它们提供值。变量如何获得值?前面介绍过在程序中获取值的两种途径。第1种途径是赋值: 1cows = 112; &nbsp;&nbsp;&nbsp;&nbsp;第2种途径是，通过函数(如scanf()) 获得值。接下来，我们着重介绍第3种途径 初始化变量 &nbsp;&nbsp;&nbsp;&nbsp;初始化(initialize)变量就是为变量赋一个初始值。在C语言中，初始化可以直接在声明中完成。只需在变量名后面加上赋值运算符 (&#x3D;)和待赋给变量的值即可。如下所示: 123int hogs = 21;int cows = 32，goats = 14;int dogs，cats= 94; /*有效，但是这种格式很糟糕*/ &nbsp;&nbsp;&nbsp;&nbsp;以上示例的最后一行，只初始化了cats，并未初始化dogs。这种写法很容易让人误认为 dogs 也被初始化为 94，所以最好不要把初始化的变量和未初始化的变量放在同一条声明中。&nbsp;&nbsp;&nbsp;&nbsp;简而言之，声明为变量创建和标记存储空间，并为其指定初始值(如图 3.4 所示)。 int 类型常量 &nbsp;&nbsp;&nbsp;&nbsp;上面示例中出现的整数(21、32、14 和 94)都是整型常量或整型字面量。C语言把不含小数点和指数的数作为整数。因此，22 和-44 都是整型常量，但是 22.0 和 22E1 则不是。语言把大多数整型常量视为int类型，但是非常大的整数除外。详见后面“long 常量和long long 常量”小节对long int 类型的讨论 打印int值&nbsp;&nbsp;&nbsp;&nbsp;可以使用printf()函数打印int类型的值第2章中介绍过，%d指明了在一行中打印整数的位置。%称为转换说明，它指定了 printf()应使用什么格式来显示一个值。格式化字符串中的每个%都与待打印变量列表中相应的 int 值匹配。这个值可以是 int 类型的变量nt 类型的常量或其他任何值为int类型的表达式。作为程序员，要确保转换说明的数量与待打印值的数量相同，编译器不会捕获这类型的错误。程序清单3.2演示了一个简单的程序，程序中初始化了一个变量，并打印该变量的值、一个常量值和一个简单表达式的值。另外，程序还演示了如果粗心犯错会导致什么结果。 程序清单3.2 print1.c 程序 12345678910111213/* print1.c - 演示 printf()的一些特性 */#include &lt;stdio.h&gt;int main(void) &#123; int ten = 10; int two=2; printf(&quot;Doing it right: &quot;); printf(&quot;%d minus %d is %d\\n&quot;, ten, 2, ten - two); printf(&quot;Doing it wrong: &quot;); printf(&quot;%d minus %d is %d\\n&quot;, ten); //遗漏2个参数 return 0;&#125; &nbsp;&nbsp;&nbsp;&nbsp;编译并运行该程序，输出如下: Doing it right: 10 minus 2 is 8Doing it wrong: 10 minus 16 is 1650287143 &nbsp;&nbsp;&nbsp;&nbsp;在第一行输出中第1个%d对应int类型变量ten; 第2个%d对应int类型常量2；第3个%d对应int类型表达式ten - two的值。在第二行输出中，第1个%d对应 ten的值，但是由于没有给后两个%d提供任何值，所以打印出的值是内存中的任意值(读者在运行该程序时显示的这两个数值会与输出示例中的数值不同，因为内存中储存的数据不同，而且编译器管理内存的位置也不同)。 &nbsp;&nbsp;&nbsp;&nbsp;你可能会抱怨编译器为何不能捕获这种明显的错误，但实际上问题出在printf())不寻常的设计。大部分函数都需要指定数目的参数，编译器会检查参数的数目是否正确。但是，printf()函数的参数数目不定，可以有1个、2个、3个或更多，编译器也爱莫能助。记住，使用 printf()函数时，要确保转换说明的数量与待打印值的数量相等。 八进制和十六进制 &nbsp;&nbsp;&nbsp;&nbsp;通常，C语言都假定整型常量是十进制数。然而，许多程序员很喜欢使用八进制和十六进制数。因为8和16 都是2的幂，而 10 却不是。显然，八进制和十六进制记数系统在表达与计算机相关的值时很方便。例如，十进制数 65536经常出现在 16 位机中，用十六进制表示正好是 10000。另外，十六进制数的每一位的数恰好由4位二进制数表示。例如，十六进制数3是 0011，十六进制数 5 是0101。因此，十六进制数 35 的位组合(bilpattern)是 00110101，十六进制数 53 的位组合是01010011。这种对应关系使得十六进制和二进制的转换非常方便。但是，计算机如何知道 10000 是十进制、十六进制还是二进制?在C语言中，用特定的前缀表示使用哪种进制。0x或0 前缀表示十六进制值，所以十进制数 16 表示成十六进制是0x10 或 0X10与此类似，0前表示八进制。例如，十进制数 16 表示成八进制是 020。第 15 章将更全面地介绍进制相关的内容。 &nbsp;&nbsp;&nbsp;&nbsp;要清楚，使用不同的进制数是为了方便，不会影响数被储存的方式。也就是说，无论把数字写成 16、020或0x10，储存该数的方式都相同，因为计算机内部都以二进制进行编码。 显示八进制和十六进制 &nbsp;&nbsp;&nbsp;&nbsp;在C程序中，既可以使用和显示不同进制的数。不同的进制要使用不同的转换说明。以十进制显示数字，使用%d；以八进制显示数字，使用%o:；以十六进制显示数字，使用%x。另外，要显示各进制数的前级0、0x和0X，必须分别使用%#o、%#x、%#X。程序清单 3.3 演示了一个小程序。回忆一下，在某些集成开发环境(IDE)下编写的代码中插入getchar();语句，程序在执行完毕后不会立即关闭执行窗口。 程序清单3.3 bases,c 程序 1234567891011/* bases.c--以十进制、八进制、十六进制打印十进制数 100 */#include &lt;stdio.h&gt;int main(void) &#123; int x= 100; printf(&quot;dec = %d; octal = %o; hex = %x\\n&quot;, x, x, x); printf(&quot;dec = %d; octal = %#o; hex = %#n&quot;, x, x, x); return 0;&#125; &nbsp;&nbsp;&nbsp;&nbsp;编译并运行该程序，输出如下:dec &#x3D; 100; octal &#x3D; 144; hex &#x3D; 64dec &#x3D; 100; octal &#x3D; 0144; hex &#x3D; 0x64 &nbsp;&nbsp;&nbsp;&nbsp;该程序以3 种不同记数系统显示同一个值。printf()函数做了相应的转换。注意如果要在八进制和十六进制值前显示0和0x前级，要分别在转换说明中加入#。 其他整数类型&nbsp;&nbsp;&nbsp;&nbsp;初学C语言时，int类型应该能满足大多数程序的整数类型需求。尽管如此，还应了解一下整型的其他形式。当然，也可以略过本节跳至 3.4.3 节阅读 char 类型的相关内容，以后有需要时再阅读本节。 &nbsp;&nbsp;&nbsp;&nbsp;C语言提供3 个附属关键字修饰基本整数类型: short、long 和 unsgned，应记住以下几点。 short int类型(或者简写为 short)占用的存储空间可能比 int 类型少，常用于较小数值的合以节省空间。与 int 类似，short 是有符号类型。 long int或long占用的存储空间可能比 int 多，适用于较大数值的场合。与 int 类似，long是有符号类型。 long long int 或 long long (C99 标准加入)占用的储存空间可能比 long 多，适用于更大数值的场合。该类型至少占 64 位。与 int 类似，long long 是有符号类型。 unsigned int或unsigned只用于非负值的场合。这种类型与有符号类型表示的范围不同。例如，16位unsigned int允许的取值范围是0~65535，而不是-32768~32767。用于表示正负号的位现在用于表示另一个二进制位，所以无符号整型可以表示更大的数。 在C90标准中,添加了unsignedlong int或unsigned long和unsigned int或unsigned short类型。C99标准又添加了unsigned long long int或unsigned long long。 在任何有符号类型前面添加关键字 signed，可强调使用有符号类型的意图。例如，short、short int、signed short、siqned short int都表示同一种类型。 声明其他整数类型其他整数类型的声明方式与 int 类型相同，下面列出了一些例子。不是所有的C 编译器都能识别最后3条声明，最后一个例子所有的类型是 C99 标准新增的。long int estine;long johns;short int erns;short ribs;unsigned int s count;unsigned players;unsigned long headcount;unsigned short yesvotes;long long ago;","categories":[{"name":"手抄CPrimerPlus","slug":"手抄CPrimerPlus","permalink":"https://blog.ciraos.top/categories/%E6%89%8B%E6%8A%84CPrimerPlus/"},{"name":"第03章数据和c","slug":"手抄CPrimerPlus/第03章数据和c","permalink":"https://blog.ciraos.top/categories/%E6%89%8B%E6%8A%84CPrimerPlus/%E7%AC%AC03%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%92%8Cc/"}],"tags":[{"name":"第03章数据和c","slug":"第03章数据和c","permalink":"https://blog.ciraos.top/tags/%E7%AC%AC03%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%92%8Cc/"},{"name":"手抄CPrimerPlus","slug":"手抄CPrimerPlus","permalink":"https://blog.ciraos.top/tags/%E6%89%8B%E6%8A%84CPrimerPlus/"}]},{"title":"hexo备份","slug":"hexo-backup","date":"2023-07-02T05:04:55.000Z","updated":"2023-07-02T05:04:55.000Z","comments":true,"path":"p/d4b6f22c/","link":"","permalink":"https://blog.ciraos.top/p/d4b6f22c/","excerpt":"","text":"TO DO要换电脑了，博客却不知道怎么转移？平时不太放心源码，怕电脑出故障，把源码丢失怎么办？没有关系，让我们把源码保存至Gitee。 &nbsp;&nbsp;&nbsp;&nbsp;首先在Github创建一个新仓库，创建的时候一定要选择private，不过忘记了也无所谓，在仓库的settings界面也可以设置，仓库名字随便取，路径不用管。本篇文章就取名为hexo-blog-source。 &nbsp;&nbsp;&nbsp;&nbsp;接下来，在博客根目录创建一个.gitignore文件，用来屏蔽一些不用上传的文件夹或文件。 有些文件或文件夹在hexo init的时候就已经写进去了，所以我们只需要把我们自己的文件加进去即可。 123456789.vscode/node_modules/public/themes/anzhiyu/.git/.deploy_git.gitignoredb.jsondeploy.sh &nbsp;&nbsp;&nbsp;&nbsp;这样的话，上传上来的就基本上是源码了。后期再用的话，只需要git clone拉下来，然后在这个目录里面右键Git bash here，然后再npm i，这时则会根据目录的package.json自动安装node_modules。 &nbsp;&nbsp;&nbsp;&nbsp;点击创建，然后视线转到如下界面，这就是我们接下来要操作的了： &nbsp;&nbsp;&nbsp;&nbsp;在博客根目录右键Git bash here，然后分别输入以下指令（我们并不需要readme.md）： 123456git initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/ciraos/hexo-blog-source.gitgit branch -M maingit push -u origin &quot;main&quot; &nbsp;&nbsp;&nbsp;&nbsp;一系列操作以后，你的Github仓库就应该有源码了。 一定要将源码仓库设置成私有。不然，等你以后上百度查资料，发现别人的域名挂着你的东西，也就只能干瞪眼了。 Q&amp;A&nbsp;&nbsp;&nbsp;&nbsp;问题来了，themes文件夹下的主题也有.git文件夹，也就说明它也是一个仓库。也就是当在你执行push源码的时候，会再push一个仓库，这样的话，两个.git文件夹就会冲突，bash报错。 第一种方法 &nbsp;&nbsp;&nbsp;&nbsp;此时可以通过删除主题文件夹下的.git文件夹，或者将主题文件夹下的.git文件夹写进.gitignore。如果你的themes文件夹有主题的话，先将主题文件夹下的.git的相对路径添加至.gitignore里面。例如：/themes/anzhiyu/.git。（不知道这样安不安全~~qwq） 第二种方法 &nbsp;&nbsp;&nbsp;&nbsp;可以通过添加submodules的方法（不过这种方法我现在还不太会）。 第三种方法（最笨的方法） &nbsp;&nbsp;&nbsp;&nbsp;把博客源码/themes/anzhiyu主题下的.git文件夹删除，然后再在别的地方重新git clone一个新的带.git的主题文件夹，然后把这个文件夹除了.git文件夹全部复制到博客源码的/themes/anzhiyu文件夹下。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/categories/hexo/"},{"name":"hexo备份","slug":"hexo/hexo备份","permalink":"https://blog.ciraos.top/categories/hexo/hexo%E5%A4%87%E4%BB%BD/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/tags/hexo/"},{"name":"hexo备份","slug":"hexo备份","permalink":"https://blog.ciraos.top/tags/hexo%E5%A4%87%E4%BB%BD/"}]},{"title":"css之linear_gradient线性渐变","slug":"css-linear-gradient","date":"2023-06-28T11:37:39.000Z","updated":"2023-06-28T11:37:39.000Z","comments":true,"path":"p/4c61a36a/","link":"","permalink":"https://blog.ciraos.top/p/4c61a36a/","excerpt":"","text":".box{width:200px;height:200px;background:rgba(60,100,250);margin:0 auto}.box1{width:200px;height:200px;background:linear-gradient( 0deg,rgba(255,192,0.1),rgba(60,180,250) );margin:0 auto}.box2{width:200px;height:200px;background:linear-gradient( 45deg,rgba(255,192,0.1),rgba(60,180,250) );margin:0 auto}.box3{width:200px;height:200px;background:linear-gradient( 90deg,rgba(255,192,0.1),rgba(60,180,250) );margin:0 auto}.box4{width:200px;height:200px;background:linear-gradient( 90deg,rgba(255,192,0.1),50%,rgba(60,180,250) );margin:0 auto}.box6{width:200px;height:200px;background:linear-gradient(90deg,red,blue,orange);margin:0 auto}.box7{width:200px;height:200px;background:linear-gradient(45deg,red,blue,orange);margin:0 auto} 普通背景 12345678&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;style&gt; .box &#123; width: 200px; height: 200px; background: rgba(60, 100, 250); &#125;&lt;/style&gt; 渐变 自下往上 123456789101112&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;style&gt; .box1 &#123; width: 200px; height: 200px; background: linear-gradient( 0deg, rgba(255, 192, 0.1), rgba(60, 180, 250) ); &#125;&lt;/style&gt; 渐变 自左下往右上 123456789101112&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;style&gt; .box2 &#123; width: 200px; height: 200px; background: linear-gradient( 45deg, rgba(255, 192, 0.1), rgba(60, 180, 250) ); &#125;&lt;/style&gt; 渐变 自左往右 123456789101112&lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;&lt;style&gt; .box3 &#123; width: 200px; height: 200px; background: linear-gradient( 90deg, rgba(255, 192, 0.1), rgba(60, 180, 250) ); &#125;&lt;/style&gt; 渐变区间 自左往右50%-100% 12345678910111213&lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;&lt;style&gt; .box4 &#123; width: 200px; height: 200px; background: linear-gradient( 90deg, rgba(255, 192, 0.1), 50%, rgba(60, 180, 250) ); &#125;&lt;/style&gt; 渐变区间 自左往右50%-90% 这样写好像有问题（ 1234567891011121314&lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;&lt;style&gt; .box5 &#123; width: 200px; height: 200px; background: linear-gradient( 90deg, rgba(255, 192, 0.1), 60%, rgba(60, 180, 250), 90% ); &#125;&lt;/style&gt; 三色渐变 12345678&lt;div class=&quot;box6&quot;&gt;&lt;/div&gt;&lt;style&gt; .box5 &#123; width: 200px; height: 200px; background: linear-gradient(90deg, red, blue, orange); &#125;&lt;/style&gt; 三色渐变 自左下往右上 12345678910111213&lt;div class=&quot;box7&quot;&gt;&lt;/div&gt;&lt;style&gt; .box7 &#123; width: 200px; height: 200px; background: linear-gradient( 45deg, red, blue, orange ); &#125;&lt;/style&gt;","categories":[{"name":"css学习","slug":"css学习","permalink":"https://blog.ciraos.top/categories/css%E5%AD%A6%E4%B9%A0/"},{"name":"线性渐变","slug":"css学习/线性渐变","permalink":"https://blog.ciraos.top/categories/css%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"}],"tags":[{"name":"线性渐变","slug":"线性渐变","permalink":"https://blog.ciraos.top/tags/%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"},{"name":"css学习","slug":"css学习","permalink":"https://blog.ciraos.top/tags/css%E5%AD%A6%E4%B9%A0/"}]},{"title":"vscode配置C/C++运行环境","slug":"Setting-c&&c++-VscodeRuntime","date":"2023-06-27T10:08:03.000Z","updated":"2023-06-27T10:08:03.000Z","comments":true,"path":"p/add748af/","link":"","permalink":"https://blog.ciraos.top/p/add748af/","excerpt":"","text":"前提准备 一台电脑 mingw运行环境 vscode 耐心 and so on 运行环境安装mingw包mingw包 提取码：sbxq &nbsp;&nbsp;&nbsp;&nbsp;下载完成之后应该是个压缩包，将其解压至自己喜欢的位置，注意，不建议将安装的文件夹mingw解压至有空格的目录，例如：Program Files (x86)，将压缩包解压至没有空格的目录。 &nbsp;&nbsp;&nbsp;&nbsp;之后，回到桌面，此电脑 -&gt; 属性 -&gt; 高级系统设置。并按照下图所示，设置mingw环境变量： 环境变量 -&gt; 系统变量-path -&gt; 新建 将../mingw/bin的目录加至环境变量中。 可以通过点击新建 -&gt; 预览添加mingw目录。 &nbsp;&nbsp;&nbsp;&nbsp;之后，全部点击确定，关掉这些窗口。打开cmd（啥都可以，git bash也可以），输入gcc -v，出现以下则说明环境变量配置成功： 123456789$ gcc -vUsing built-in specs.COLLECT_GCC=D:\\MinGW\\bin\\gcc.exeCOLLECT_LTO_WRAPPER=d:/mingw/bin/../libexec/gcc/mingw32/8.2.0/lto-wrapper.exeTarget: mingw32Configured with: ../src/gcc-8.2.0/configure --build=x86_64-pc-linux-gnu --host=mingw32 --target=mingw32 --prefix=/mingw --disable-win32-registry --with-arch=i586 --with-tune=generic --enable-languages=c,c++,objc,obj-c++,fortran,ada --with-pkgversion=&#x27;MinGW.org GCC-8.2.0-3&#x27; --with-gmp=/mingw --with-mpfr=/mingw --with-mpc=/mingw --enable-static --enable-shared --enable-threads --with-dwarf2 --disable-sjlj-exceptions --enable-version-specific-runtime-libs --with-libiconv-prefix=/mingw --with-libintl-prefix=/mingw --enable-libstdcxx-debug --with-isl=/mingw --enable-libgomp --disable-libvtv --enable-nls --disable-build-format-warningsThread model: win32gcc version 8.2.0 (MinGW.org GCC-8.2.0-3) visual stdio code下载安装vscodevscode &nbsp;&nbsp;&nbsp;&nbsp;下载过程不过多阐述（ vscode 配置c++&nbsp;&nbsp;&nbsp;&nbsp;创建一个c++文件夹，用vscode打开此文件夹，随便创建一个cpp文件： 注意，文件夹名称不得为中文！ 12345678#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; &quot;hello world!&quot; &lt;&lt; endl; return 0;&#125; &nbsp;&nbsp;&nbsp;&nbsp;按下F5，选择C++ (GDB/LLDB)： 截图先欠着（ &nbsp;&nbsp;&nbsp;&nbsp;然后选择第一个： 截图先欠着（ &nbsp;&nbsp;&nbsp;&nbsp;之后，看着系统一顿操作，我们点击左下角打开控制台，切换到调试控制台，看到有 hello world，就配置成功啦！ 截图先欠着（ &nbsp;&nbsp;&nbsp;&nbsp;但是，问题来了，它没有弹出我们想要的黑漆漆的窗口怎么办？没有内味！！！！！！！ &nbsp;&nbsp;&nbsp;&nbsp;欸，不要着急，我们可以看见有一个.vscode文件夹，里面已经生成了一个tasks.json，我们再创建一个launch.json： 1234567891011121314151617181920212223242526272829&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;g++.exe - 生成和调试活动文件&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, // 改为true，就可以弹出控制台啦！！！！ &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;D:\\\\MinGW\\\\bin\\\\gdb.exe&quot;, // 设置为自己的 mingw\\\\bin\\\\gdb.exe 路径 &quot;setupCommands&quot;: [ &#123; &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125; ], &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe 生成活动文件&quot; &#125; ]&#125; &nbsp;&nbsp;&nbsp;&nbsp;再附上我自己自定义的settings.json文件，这个文件可以让你的设定在这个文件夹内有效，不影响vscode全局使用。&nbsp;&nbsp;&nbsp;&nbsp;同理，一个文件夹可以创建一个.vscode文件夹来自定义局部设定，在使用git的时候，还可以通过.gitignore阻止.vscode的上传！ 123456789101112131415161718192021&#123; &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, &quot;editor.fontFamily&quot;: &quot;Consolas, &#x27;Courier New&#x27;, monospace&quot;, &quot;editor.fontSize&quot;: 13, &quot;editor.fontWeight&quot;: &quot;bold&quot;, &quot;editor.formatOnSave&quot;: true, &quot;editor.unicodeHighlight.allowedCharacters&quot;: &#123; &quot;！&quot;: true, &quot;。&quot;: true, &quot;：&quot;: true, &quot;（&quot;: true, &quot;）&quot;: true, &quot;，&quot;: true &#125;, &quot;explorer.confirmDelete&quot;: false, &quot;explorer.confirmDragAndDrop&quot;: false, &quot;explorer.sortOrder&quot;: &quot;type&quot;, &quot;files.associations&quot;: &#123; &quot;ostream&quot;: &quot;cpp&quot; &#125;,&#125; &nbsp;&nbsp;&nbsp;&nbsp;那么。你有没有成功呢！！！ c&nbsp;&nbsp;&nbsp;&nbsp;c大致上和C++相同，唯一差别就是在.vscode文件夹内配置的设置问题，c语言的则改为如下： c_cpp_properties.json中的compilerPath则改为gcc.exe： 123456789101112131415161718192021&#123; &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;Win32&quot;, &quot;includePath&quot;: [ &quot;$&#123;workspaceFolder&#125;/**&quot; ], &quot;defines&quot;: [ &quot;_DEBUG&quot;, &quot;UNICODE&quot;, &quot;_UNICODE&quot; ], &quot;windowsSdkVersion&quot;: &quot;10.0.19041.0&quot;, &quot;compilerPath&quot;: &quot;D:\\\\MinGW\\\\bin\\\\gcc.exe&quot;, &quot;cStandard&quot;: &quot;c17&quot;, &quot;cppStandard&quot;: &quot;c++17&quot;, &quot;intelliSenseMode&quot;: &quot;$&#123;default&#125;&quot; &#125; ], &quot;version&quot;: 4&#125; tasks.json中的command改为gcc.exe： 12345678910111213141516171819202122232425262728&#123; &quot;tasks&quot;: [ &#123; &quot;type&quot;: &quot;cppbuild&quot;, &quot;label&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;, &quot;command&quot;: &quot;D:\\\\MinGW\\\\bin\\\\g++.exe&quot;, &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot; ], &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;problemMatcher&quot;: [ &quot;$gcc&quot; ], &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;detail&quot;: &quot;调试器生成的任务。&quot; &#125; ], &quot;version&quot;: &quot;2.0.0&quot;&#125;","categories":[{"name":"c/cplusplus","slug":"c-cplusplus","permalink":"https://blog.ciraos.top/categories/c-cplusplus/"},{"name":"vscode","slug":"c-cplusplus/vscode","permalink":"https://blog.ciraos.top/categories/c-cplusplus/vscode/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://blog.ciraos.top/tags/vscode/"},{"name":"c/cplusplus","slug":"c-cplusplus","permalink":"https://blog.ciraos.top/tags/c-cplusplus/"}]},{"title":"anzhiyu主题搭建友链朋友圈下-前端","slug":"hexo-circle-of-friends1","date":"2023-06-24T05:44:15.000Z","updated":"2023-06-27T10:14:30.000Z","comments":true,"path":"p/1d01663b/","link":"","permalink":"https://blog.ciraos.top/p/1d01663b/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;首先我们来看一下anzhiyu主题的朋友圈设置： 123456# 朋友圈配置friends_vue: enable: true vue_js: https://cdn.jsdelivr.net/npm/ciraos-static@1.0.0/js/index.8ca3b1ec.js apiurl: https://fcircle.ciraos.top/ # 朋友圈后端地址 top_background: https://cdn.jsdelivr.net/gh/ciraos/ciraos-static@main/img/miku.webp &nbsp;&nbsp;&nbsp;&nbsp;这里分为三部分： vue_js前端：其实很简单，就是一个js文件。 aipurl后端：后端详见anzhiyu主题搭建友链朋友圈上-后端 top_background顶部头图：选填。 前端 index.js 获取朋友圈网页配置朋友圈网页配置 &nbsp;&nbsp;&nbsp;&nbsp;anzhiyu主题给了我们两种方法： 将https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/js/friends_vue/index.js下载下来，然后将代码中的friends.anheyu.com替换为您的后端url然后在上述配置中的vue_js引入； 将hexo-circle-of-friends-front项目下载下来之后，将代码中的friends.anheyu.com替换为你自己的后端链接，然后npm run build，然后会在dist/assets文件夹下生成一个js文件，这就是我们前端需要的js文件啦！然后把它放在你可以引入的地方，不过不建议本地引入。 朋友圈页面配置&nbsp;&nbsp;&nbsp;&nbsp;在博客根目录打开git bash here，执行以下命令，创建一个友链pyq的页面： 1hexo new page &quot;fcircle&quot; &nbsp;&nbsp;&nbsp;&nbsp;接着再编辑一下友链pyq页面的font-matter：&nbsp;&nbsp;&nbsp;&nbsp;只展示主要部分： 123456---title: 朋友圈type: &#x27;fcircle&#x27;comments: falsesidebar: false--- &nbsp;&nbsp;&nbsp;&nbsp;注意，留心网址最后有没有/，如果没有，请加上，反之，则忽略。&nbsp;&nbsp;&nbsp;&nbsp;OK! 基本上部署过程已经结束！记得要在配置文件的menu中加上pyq的链接地址哦！&nbsp;&nbsp;&nbsp;&nbsp;然后我们就可以hexo s查看效果啦！！","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/categories/hexo/"},{"name":"fcirlce搭建前端","slug":"hexo/fcirlce搭建前端","permalink":"https://blog.ciraos.top/categories/hexo/fcirlce%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/tags/hexo/"},{"name":"fcirlce搭建前端","slug":"fcirlce搭建前端","permalink":"https://blog.ciraos.top/tags/fcirlce%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF/"}]},{"title":"anzhiyu主题搭建友链朋友圈上-后端","slug":"hexo-circle-of-friends","date":"2023-06-24T04:58:11.000Z","updated":"2023-06-24T04:58:11.000Z","comments":true,"path":"p/aeee3cb8/","link":"","permalink":"https://blog.ciraos.top/p/aeee3cb8/","excerpt":"","text":"预览预览友链朋友圈 TO DOGithub配置info 部署方法有三种：Github、server和docker。因为我使用的是Github部署和选择mongodb作为数据库，所以本文阐述Github+mongodb的部署方法。 &nbsp;&nbsp;&nbsp;&nbsp;浏览器打开Rock-Candy-Tea&#x2F;Hexo-circle-of-friends，点击fork，fork完成后应该是这个样子： &nbsp;&nbsp;&nbsp;&nbsp;接下来，修改/hexo-circle-of-friends文件夹下的fc_settings.py， &nbsp;&nbsp;&nbsp;&nbsp;不需修改部分皆省略，需修改部分按自己情况写，&nbsp;&nbsp;&nbsp;&nbsp;注意，主题一定要写common2，否则会爬取不到友链！ 1234567891011121314151617# ....LINK = [ &#123; &quot;link&quot;: &quot;https://blog.ciraos.top/friends/&quot;, &quot;theme&quot;: &quot;common2&quot; &#125;,]# ....DATABASE = &quot;mongodb&quot;DEPLOY_TYPE = &quot;github&quot;# .... &nbsp;&nbsp;&nbsp;&nbsp;然后点击仓库的Settings--&gt;Secrets--&gt;New repository secret，添加四个环境变量secret： GH_NAME: github名称，也就是你的用户名 GH_EMAIL: github名称，也就是你的用户名 GH_TOEKN: github访问token，其中，Select scopes选择repo和workflow。 SDTORAGE_TYPE: 存储方式，填写mongodb &nbsp;&nbsp;&nbsp;&nbsp;接下来添加环境变量secert： 因为数据库选择的是mongodb，请添加MONGODB_URI &nbsp;&nbsp;&nbsp;&nbsp;下面演示使用mongodb的存储方式，首先需要创建mongodb数据库，创建过程略。 mongodbmongodb 如下图所示，在仓库添加MONGODB_URI。 &nbsp;&nbsp;&nbsp;&nbsp;启用fork后仓库的github action，点击Actions--&gt;I understand my workflows, go ahead and enable them c此处截图略，因为我已经创建好了（ &nbsp;&nbsp;&nbsp;&nbsp;之后点击update-friends-posts并启用workflow： c此处截图略，因为我已经创建好了（ vercel配置&nbsp;&nbsp;&nbsp;&nbsp;前往vercel官网，点击New project，选择刚刚创建好的仓库，然后点击deploy： &nbsp;&nbsp;&nbsp;&nbsp;deploy完成之后，点击仓库的settings，点击environment variables，添加变量，和上述github的变量一样： 此处应该有截图 GH_NAME: github名称，也就是你的用户名 GH_EMAIL: github名称，也就是你的用户名 GH_TOEKN: github访问token，其中，Select scopes选择repo和workflow。 SDTORAGE_TYPE: 存储方式，填写mongodb VERCEL_ACCESS_TOEKN,获取方式和github大致，去settings申请。 &nbsp;&nbsp;&nbsp;&nbsp;接下来还是一样添加环境变量： 因为数据库选择的是mongodb，请添加MONGODB_URI 下面演示使用mongodb的存储方式，首先需要mongodb数据库。 截图先欠着（ &nbsp;&nbsp;&nbsp;&nbsp;添加完之后，点击deploy。 &nbsp;&nbsp;&nbsp;&nbsp;耐心等待部署完成啦！！之后，vercel会生成一个网址，就是我们前端需要的网址啦！api网址写在前端的时候记得在网址末尾加上/。 &nbsp;&nbsp;&nbsp;&nbsp;例如我的vercel给的网址是https://hexo-circle-of-friends-one.vercel.app，那么，我在volantis设置中应改写为https://hexo-circle-of-friends-one.vercel.app/，这样的话，部署的时候，前端会自动为我们加上all，这就是我们爬取的数据啦！！！ &nbsp;&nbsp;&nbsp;&nbsp;将vercel官网给的网址末尾加上/all，打开后就会看到一堆数据，那么就是部署完成啦！（这时刚刚的leancloud上也能看到上传的数据。）此后在每天的0,6,12,18,21点整，都会自动启动爬虫进行爬取。 &nbsp;&nbsp;&nbsp;&nbsp;回到刚刚部署的github的hexo-circle-of-friends仓库，点击一次star，然后点击actions，就可以看见正在running的workflow啦！！ 咕咕咕","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/categories/hexo/"},{"name":"fcirlce搭建后端","slug":"hexo/fcirlce搭建后端","permalink":"https://blog.ciraos.top/categories/hexo/fcirlce%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/tags/hexo/"},{"name":"fcirlce搭建后端","slug":"fcirlce搭建后端","permalink":"https://blog.ciraos.top/tags/fcirlce%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF/"}]},{"title":"我想做的一些事情","slug":"something-i-want-to-do","date":"2023-06-22T12:05:27.000Z","updated":"2023-06-22T12:05:27.000Z","comments":true,"path":"p/45bebdad/","link":"","permalink":"https://blog.ciraos.top/p/45bebdad/","excerpt":"","text":"(一) &nbsp;&nbsp;&nbsp;&nbsp;我想做的事情有很多。我入坑c语言的原因就是因为一款游戏：红色警戒2：尤里的复仇！其实，红警这款游戏，是我叔叔带我入坑的，起初我只是个只敢打简单的小lj。但是，因为某种原因，随着年龄的增大，与尤里的复仇接触越来越少，后来就没在玩了。一直等到高中毕业后，就看起了哔哩哔哩，然后在上面找到了尤里的复仇的玩家对战视频，好奇点了进去，然后发现红警居然可以联机玩，联机平台是国人用爱发电开发的ra2ol，真的是太厉害了！！！。这个up主是可爱小羊毛，然后我进了羊毛大佬的粉丝群，也就算入了尤复的玩家对战圈了吧！ &nbsp;&nbsp;&nbsp;&nbsp;… … &nbsp;&nbsp;&nbsp;&nbsp;就这样过了一段时间，大致的想不起来了，后来加入了鹰眼战队群，这是ra2ol联机平台自创的战队功能，记得当时还有个排行榜，我看了半天没找到喜欢的（。然后，偶尔在一次对战中遇到了鹰眼战队队长白酱，三言两语后便进了群（然后一直到现在！！！ &nbsp;&nbsp;&nbsp;&nbsp;… … &nbsp;&nbsp;&nbsp;&nbsp;后来，在战队群里的nb群友，发了个自定义的尤复素材，当时把我惊呆了！！原来尤里的复仇也可以做mod嘛，太强了，，完了，然后就记不太清了...，但是，尤其记得，自从那次以后，我又入圈了尤里的复仇mod圈，，，然后，我发现，我打开了新世界的一扇大大大大大大门！！其中，最让我惊艳的是Ares扩展平台，居然可以把mod玩到这么高级，后来，我就疯狂的找教程，加群，向大佬请求问题，甚至自己还加入了个mod群，用来制作我自己的mod！！ &nbsp;&nbsp;&nbsp;&nbsp;但是呢，万事开头难，第一次总是会这么的不完美，这个群也如同吃剩的垃圾一样，，被扔进了垃圾桶，，，然后，虽然也断断续续想制作mod，但是一个人属实太难了，我虽然也见过很多独立开发者，但是，我没有人家这么多的时间，，，就这样，只停留在新建文件夹的一步。。。。 &nbsp;&nbsp;&nbsp;&nbsp;再然后，我又接触了更高级的大佬，他们有自己的一套理解和工具，因为他们会编程，所以，可以根据ares的开发思路，来研究自己专属的开放平台，就比如Hares，等等，这又刷新了我的世界观，原来也能这么玩！！！ &nbsp;&nbsp;&nbsp;&nbsp;然后，我又是向大佬咨询，又是疯狂寻找github，才发现，原来这是c语言(c语言还是c++，记不清了)！然后，我又无情地给自己挖了一个大坑：编程！！！。记得编程有很多种语言，java、python、c语言、c++等等，但是，要想都写的好，就要从c语言学起！！于是我买了本c语言的书籍，自己抱着啃，，，，不得不说，太难了。。。 &nbsp;&nbsp;&nbsp;&nbsp;在我自学c语言这期间，也发生了很多趣事，比如博客这个新世界的大门！ &nbsp;&nbsp;&nbsp;&nbsp;好啦，欲知后事如何，且听下回分解！！ 2022/07/25 1:28:00 (二)","categories":[{"name":"笔记","slug":"笔记","permalink":"https://blog.ciraos.top/categories/%E7%AC%94%E8%AE%B0/"},{"name":"我想做的一些事情","slug":"笔记/我想做的一些事情","permalink":"https://blog.ciraos.top/categories/%E7%AC%94%E8%AE%B0/%E6%88%91%E6%83%B3%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.ciraos.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"我想做的一些事情","slug":"我想做的一些事情","permalink":"https://blog.ciraos.top/tags/%E6%88%91%E6%83%B3%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/"}]},{"title":"clientworker","slug":"clientworker","date":"2023-06-22T11:39:34.000Z","updated":"2023-07-21T02:00:00.000Z","comments":true,"path":"p/b6e7cf49/","link":"","permalink":"https://blog.ciraos.top/p/b6e7cf49/","excerpt":"","text":"什么是 clientworkerClientWorker Before we start…. ClientWorker能干什么？ 绕备，在域名不变动的情况下，其余用户所有请求均可以定向到你的其他服务器或者cdn，而首屏域名无需ICP备案。 降本，你可以用廉价的家宽+公网ipv4&#x2F;ipv6，即使是80&#x2F;443被封锁，你也可以在不变动端口的情况下将用户流量引向家宽。 白嫖，可以用免费的公网穿透服务，接近零成本托管你的服务。 加速，将静态资源流量（乃至动态资源）并发到全球cdn，实现前端级负载均衡。 绕禁，通过在前端修改标头的方式，修复被故意篡改的MIME，正常托管网站，绕过各大托管商对于网站部署的限制，可以毫无负担的使用阿里云、腾讯云等对象存储而不用开启网站模式，乃至GithubRaw无限流量（绕过GithubPage 100GB限制）。 愈合：通过并发方式，辅助JSDelivr、Unpkg、cdnjs等大陆几乎不可达请求重定向至其他cdn，从而实现无修改、全球加速。 不宕，即使首屏服务器离线或不可达，已访问过的用户依旧可以正常命中备用服务器。 缓存，颗粒化控制缓存，多种情况不同选择，智能调度缓存和请求，避免有缓存时无返回、缓存无法及时更新问题，确保缓存在客户端工作的更顺畅。 离线，可以迅速支撑普通离线应用，助力快速构建PWA。 兼容，Webp无缝，可以通过判断标头来判断是否支持Webp，并且自动替换图片请求，为网站加速助力。 审核，通过内置的规则可以屏蔽并替换、拦截敏感词汇，实现网站内容安全。 无刷，你不需要刷新就可以激活ClientWorker 热更，即使源站完全宕机，你也可以更新用户手中的ClientWorker与配置，确保网站正常运行。 切片，对于一个请求发起多个切片以提高单文件下载速度 叠速，专门为ClientWorker开发的KFCThursdayVW50引擎能在浏览器端切片并同时并发不同的镜像服务器，对于下载大文件可以带宽叠加的效果。 均衡，对多个镜像并发，选择最优的镜像服务器，保证网站的响应速度，同时达到负载均衡的目的。 高度自定义…更多玩法等你挖掘 首屏加载不在ClientWorker拦截范围内。 ServiceWorker是一个注册在指定源和路径下的事件驱动worker。而ClientWorker是利用规则全局驱动sw的插件。 ClientWorker目前涵盖了ServiceWorker的路由拦截、路由劫持、请求/响应（标头、状态、响应主体）修改、缓存调控，允许用户并发（双引擎），并且有一个自定义规则系统，可以自定义规则，拦截请求，修改响应，缓存颗粒化等功能。 ClientWorker目前不兼容原有的ServiceWorker，请通过修改Scope绕开相互的作用域。 ClientWorker需要在HTTPS环境下工作，HTTP将直接安装失败 我们明确一下我们的目的，首先，我们要放置好ClientWorker原始代码；然后，我们要在用户需要安装cw的位置填入ClientWorker安装代码，将其安装到用户浏览器中；最后，我们要写入想要达到目的的配置，完成ClientWorker的接入。 to-do通过cdn引入放置clientworker&nbsp;&nbsp;&nbsp;&nbsp;如果你的框架为hexo的话，那么，强烈建议在根目录的source文件夹创建一个cw.js的js文件。 &nbsp;&nbsp;&nbsp;&nbsp;至于config.yaml，下文中会提到，在cw.js中引入以下内容， 1234/* * 3.0.0-beta-3*/importScripts(&quot;https://lib.baomitu.com/clientworker/3.0.0-beta-3/dist/cw.js&quot;); 注：因为cw.js是在根目录的source文件夹创立的，所以它不需要引入。 写入配置&nbsp;&nbsp;&nbsp;&nbsp;同样的，在根目录的source文件夹内创建一个config.yaml，为cw配置文件。&nbsp;&nbsp;&nbsp;&nbsp;我们最初先安装最简单的就行，后期会逐渐加大代码。 123456789101112131415161718name: ClientWorker catch_rules: - rule: _ transform_rules: - search: \\#.+ searchin: url replace: &#x27;&#x27; - search: _ action: fetch fetch: engine: fetch - search: (^4|^5) searchin: status action: return return: body: The GateWay is down!This Page is provided by ClientWorker! status: 503 注意！Hexo会将yaml解析成json格式，这样的话，我们的cw也就失效了，如何避免这样的问题呢？ 当然是解铃人还须系铃人了呀！ 找到hexo的配置文件_config.yaml，找到skip_render，将我们的config.yaml放进去，防止hexo在generate的时候把yaml解析成json。 12skip_render: - &#x27;config.yaml&#x27; 配置安装代码&nbsp;&nbsp;&nbsp;&nbsp;你有三种方式接入： 三文件全域安装 、 自定义无刷新安装 、 自定义刷新安装。 &nbsp;&nbsp;&nbsp;&nbsp;其中， 全域安装，最简单，对SEO支持也最恶劣（Google会提示额外的计算开销，而百度完全没办法爬取）。比较适用于自用的、只追求速度的。 自定义无刷新安装。则对你的HTML和JS水平有所要求，对于部分不遵守标准的浏览器兼容性较差，但是这种方法对SEO没有影响，比较适合于对seo注重的网站。 自定义刷新安装对。seo略有影响，会在载入后阻断未经CW的请求并刷新一次，以便于CW及时托管，比较适合于网站提速 &nbsp;&nbsp;&nbsp;&nbsp;因为我采用的第二种，所以这里讲解第二种说法。 自定义无刷新安装&nbsp;&nbsp;&nbsp;&nbsp;这种方式有一个重载的动作，即在无刷新的情况下将当前页面重新获取并填充。这可能会出现意外的兼容性错误，请慎行。 如果你不需要重载，请将下方重载标识框内的代码删除。不重载的后果就是用户首屏的大部分请求无法被CW拦截。如果你希望用户首屏进入就被托管，请使用自定义刷新安装。 &nbsp;&nbsp;&nbsp;&nbsp;用户每次访问时都应该能运行接下来的脚本，如果你使用hexo等其他博客系统，可以在body或footer模板中添加这一段。我们强烈建议将这段代码加入在&lt;head&gt;标签中，越靠前越好，navigator.serviceWorker.register是异步函数不会阻塞页面加载。 &nbsp;&nbsp;&nbsp;&nbsp;请不要使用window.stop()，这会导致重载失效&nbsp;&nbsp;&nbsp;&nbsp;修改网页的模板，添加一段html。如果是hexo用户，可以将这段代码通过引入的方式来引入博客。 &nbsp;&nbsp;&nbsp;&nbsp;在根目录的source文件夹创建一个assets文件夹，再在这个文件夹内创建一个cw-worker.js文件，填入以下内容： 12345678910111213141516171819202122232425262728293031323334353637383940/* install cw */&lt;script&gt;if (!!navigator.serviceWorker) &#123; navigator.serviceWorker.register(&#x27;/cw.js?t=&#x27; + new Date().getTime()).then(async (registration) =&gt; &#123; if (localStorage.getItem(&#x27;cw_installed&#x27;) !== &#x27;true&#x27;) &#123; const conf = () =&gt; &#123; console.log(&#x27;[CW] Installing Success,Configuring...&#x27;); fetch(&#x27;/cw-cgi/api?type=config&#x27;) .then(res =&gt; res.text()) .then(text =&gt; &#123; if (text === &#x27;ok&#x27;) &#123; console.log(&#x27;[CW] Installing Success,Configuring Success,Starting...&#x27;); localStorage.setItem(&#x27;cw_installed&#x27;, &#x27;true&#x27;); //如果你不希望重载页面，请移除下面七行 //重载标识 - 开始 fetch(window.location.href).then(res =&gt; res.text()).then(text =&gt; &#123; document.open() document.write(text); document.close(); &#125;); //重载标识 - 结束 &#125; else &#123; console.warn(&#x27;[CW] Installing Success,Configuring Failed,Sleeping 200ms...&#x27;); setTimeout(() =&gt; &#123; conf() &#125;, 200); &#125; &#125;).catch(err =&gt; &#123; console.log(&#x27;[CW] Installing Success,Configuring Error,Exiting...&#x27;); &#125;); &#125; setTimeout(() =&gt; &#123; conf() &#125;, 50); &#125; &#125;).catch(err =&gt; &#123; console.error(&#x27;[CW] Installing Failed,Error: &#x27; + err.message); &#125;);&#125; else &#123; console.error(&#x27;[CW] Installing Failed,Error: Browser not support service worker&#x27;); &#125;&lt;/script&gt; 注：因为cw-worker.js是在根目录的source文件夹的assets文件夹创立的，它将最为第三方文件被引入。但由于它是执行clientworker的文件，所以直接在_config.anzhiyu.yml引入的话，它的渲染之后的位置就很靠后，就会适得其反。所以，这里有一个办法：在根目录创建scripts文件夹，在这个文件夹内再创建一个cw.js文件，内容如下： 123456789/** * cw.js */&#x27;use strict&#x27;;const &#123; filter &#125; = hexo.extend;const js = hexo.extend.helper.get(&#x27;js&#x27;).bind(hexo);hexo.extend.injector.register(&#x27;head_begin&#x27;, () =&gt; &#123; return js(&#x27;/assets/cw-worker.js&#x27;); &#125;); &nbsp;&nbsp;&nbsp;&nbsp;记得加上注释，以便于以后增加代码量的时候知道它是干什么的。 &nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以部署啦！然后打开你的博客，打开f12，享受cw带来的愉悦的浏览体验吧！ 扩展CW前端竞速&nbsp;&nbsp;&nbsp;&nbsp;如下图，增加首屏cw安装动画的功能。 sw首屏优化sw首屏优化 &nbsp;&nbsp;&nbsp;&nbsp;同样的，在cw-worker.js文件，填入以下内容，加在上述install cw注释的上面：&nbsp;&nbsp;&nbsp;&nbsp;cw-worker.js文件的执行顺序是前端竞速 -&gt; install cw。 12345678910111213141516171819202122232425262728293031323334/* cw-racing */(async () =&gt; &#123; if (&#x27;serviceWorker&#x27; in navigator) &#123; if (Number(window.localStorage.getItem(&#x27;CiraosBlogHelper_Set&#x27;)) &lt; 1) &#123; setTimeout(async () =&gt; &#123; console.log(&#x27;检测到您的浏览器没有安装CiraosBlogHelper_Set，开始注册&#x27;) window.stop() window.localStorage.setItem(&#x27;CiraosBlogHelper_Set&#x27;, 1) const replacehtml = await fetch(&#x27;https://npm.elemecdn.com/chenyfan-blog@1.0.13/public/notice.html&#x27;) document.body.innerHTML = await replacehtml.text() $(&#x27;#info&#x27;).innerText = &#x27;尝试安装CiraosBlogHelper...&#x27;; &#125;, 0); &#125; const $ = document.querySelector.bind(document); navigator.serviceWorker.register(`/cw.js?time=$&#123;new Date().getTime()&#125;`) .then(async () =&gt; &#123; if (Number(window.localStorage.getItem(&#x27;CiraosBlogHelper_Set&#x27;)) &lt; 2) &#123; setTimeout(() =&gt; &#123; $(&#x27;#info&#x27;).innerText = &#x27;安装成功,稍等片刻...&#x27;; &#125;, 0); setTimeout(() =&gt; &#123; window.localStorage.setItem(&#x27;CiraosBlogHelper_Set&#x27;, 2) console.log(&#x27;准备跳转&#x27;) window.location.reload() &#125;, 500) &#125; &#125;) .catch(err =&gt; console.error(`CiraosBlogHelper_Set:$&#123;err&#125;`)) &#125; else &#123; setTimeout(() =&gt; &#123; $(&#x27;#info&#x27;).innerText = &#x27;很抱歉,我们已不再支持您的浏览器.&#x27;; &#125;, 0); &#125;&#125;)() cw热更新&nbsp;&nbsp;&nbsp;&nbsp;ClientWorker支持从外部加载和更新ClientWorker及其配置，避免在源站不可达时两者无法更新。热更新与默认更新方式不同，热更新允许你从除了源站的任何地方获取更新。 &nbsp;&nbsp;&nbsp;&nbsp;同样的，这一段代码加在cw-worker.js文件的最后面，&nbsp;&nbsp;&nbsp;&nbsp;此时，cw-worker.js文件的执行顺序是前端竞速 -&gt; install cw -&gt; 热更新代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/* cw-autoupdate */; (async (updateSWDelay, updateConfigDelay) =&gt; &#123; const LSDB = &#123; read: (key) =&gt; &#123; return localStorage.getItem(key); &#125;, write: (key, value) =&gt; &#123; localStorage.setItem(key, value); &#125; &#125; async function updateSW() &#123; if (navigator.serviceWorker) &#123; navigator.serviceWorker.getRegistrations().then(async registrations =&gt; &#123; for (let registration of registrations) &#123; await registration.unregister(); &#125; console.log(`Unregistered service workers`); &#125;).then(() =&gt; &#123; //register new service worker in /cw.js navigator.serviceWorker.register(&#x27;/cw.js&#x27;).then(async registration =&gt; &#123; console.log(`Registered service worker`); await registration.update(); LSDB.write(&#x27;cw_time_sw&#x27;, new Date().getTime()); &#125;) &#125;) &#125; &#125;; async function updateConfig() &#123; await fetch(&#x27;/cw-cgi/api?type=config&#x27;).then(res =&gt; res.text()).then(res =&gt; &#123; if (res === &#x27;ok&#x27;) &#123; console.log(`Config updated`); LSDB.write(&#x27;cw_time_config&#x27;, new Date().getTime()); &#125; else &#123; console.log(`Config update failed`); &#125; &#125;) &#125; if (Number(LSDB.read(&#x27;cw_time_sw&#x27;)) &lt; new Date().getTime() - updateSWDelay) &#123; await updateSW(); await updateConfig(); &#125; if (Number(LSDB.read(&#x27;cw_time_config&#x27;)) &lt; new Date().getTime() - updateConfigDelay) &#123; await updateConfig(); &#125; setInterval(async () =&gt; &#123; await updateSW(); await updateConfig(); &#125;, updateSWDelay); setInterval(async () =&gt; &#123; await updateConfig() &#125;, updateConfigDelay);&#125;)(1000 * 60 * 60 * 12, 1000 * 60); config.yaml有待挖掘，未完待续… …","categories":[{"name":"clientworker","slug":"clientworker","permalink":"https://blog.ciraos.top/categories/clientworker/"}],"tags":[{"name":"clientworker","slug":"clientworker","permalink":"https://blog.ciraos.top/tags/clientworker/"}]},{"title":"搭建kimo寄佬的AtriBot","slug":"atri","date":"2023-06-22T07:04:54.000Z","updated":"2023-06-22T07:04:54.000Z","comments":true,"path":"p/ee5bb4ce/","link":"","permalink":"https://blog.ciraos.top/p/ee5bb4ce/","excerpt":"","text":"搭建自己的QQ机器人，让它帮你管理群、发送消息，查资料，陪你逗逼，等等。 我使用的是go-cqhttp + atri！！ ## 在linux上部署 ### 前提准备： 1. 一个服务器，或者一台电脑（我的打算是部署在服务器上，腾讯云的1h2g，ubuntu轻量云服务器）。 2. python>=3.8 的运行环境。 3. 耐心。 4. 一台电脑。 ### 配置go-cqhttp Gocq-http文档-Gocq 使用[mirai](https://github.com/mamoe/mirai)以及`MiraiGo`开发的`cqhttp golang`原生实现, 并在[cqhttp](https://github.com/richardchien/coolq-http-api)原版的基础上做了部分修改和拓展。新版本的nonebot的协议适配已经将`cqhttp`改为`onebot v11`。但是cqhttp的配置不受影响。 &nbsp;&nbsp;&nbsp;&nbsp;前往[go-cqhttp release](https://github.com/Mrs4s/go-cqhttp/releases)下载cqhttp对应的linux服务端`go-cqhttp_linux_amd64.tar.gz`文件。 &nbsp;&nbsp;&nbsp;&nbsp;进入服务器，新建一个`cqhttp`文件夹： 12cd ~mkdir cqhttp &amp;&amp; cd cqhttp &nbsp;&nbsp;&nbsp;&nbsp;之后把这个文件夹上传上去，这里我推荐国产的[finalshell](https://www.hostbuf.com/)。然后解压该文件： 1tar -xvzf go-cqhttp_linux_amd64.tar.gz &nbsp;&nbsp;&nbsp;&nbsp;解压完成以后应该是这些文件： ![files](https://s2.loli.net/2022/06/22/P4LBZ57RODdchNs.png) &nbsp;&nbsp;&nbsp;&nbsp;运行`./go-cqhttp`，等待出现以下，并选择`3: 反向 Websocket 通信`，因为我们用的是`atri`，需要用到`反向 websocket 通信`，按下数字键`3`，完成选择： ![go-cqhttp](https://s2.loli.net/2022/06/22/VPg15eThtwy2bMO.png) &nbsp;&nbsp;&nbsp;&nbsp;此时，按下`ctrl+c`结束进程，然后修改`config.yml`， 注释里有 // 的需要自己自定义。其他的我也弄不懂，所以建议不要动。 12345678910111213141516171819202122232425262728293031323334353637383940# go-cqhttp 默认配置文件account: # 账号相关 uin: 2730292563 # // QQ账号 这里写机器人的qq账号，推荐自己的小号，别用自己常用的号。 password: &#x27;Fchen19190&#x27; # // QQ账号密码 这里写你的bot的账号密码，可以留空，运行gocq时选择扫码，也可以输入密码。# ...heartbeat: # 心跳频率, 单位秒 # -1 为关闭心跳 interval: 5message: # 上报数据类型 # 可选: string,array post-format: array# ...# 连接服务列表servers: # 添加方式，同一连接方式可添加多个，具体配置说明请查看文档 #- http: # http 通信 #- ws: # 正向 Websocket #- ws-reverse: # 反向 Websocket #- pprof: #性能分析服务器 # 反向WS设置 - ws-reverse: # 反向WS Universal 地址 # 注意 设置了此项地址后下面两项将会被忽略 universal: ws://127.0.0.1:10010/onebot/v11/ws # // 反向 websockets 通信地址，按照我写的就行。 # 反向WS API 地址 #api: ws://your_websocket_api.server # // 由于设置了 universal，这里注释掉即可。 # 反向WS Event 地址 #event: ws://your_websocket_event.server # // 由于设置了 universal，这里注释掉即可。 # 重连间隔 单位毫秒 reconnect-interval: 3000 middlewares: &lt;&lt;: *default # 引用默认中间件 &nbsp;&nbsp;&nbsp;&nbsp;`_config.yml`设置好之后，继续运行`./go-cqhttp`： - 会出现两种情况： - 你没设置密码。运行`go-cqhttp`后会出现二维码，手机端qq扫码即可。 - 你设置了密码。1. 可能会成功登录；2. 登录不了：建议下载一个windows版的cq，运行gocq之后，会在本地生成`device.json`、`session.token`，复制进服务器`gocq`文件夹后，再运行`./go-cqhhtp`，此时，如果没有意外情况，可以使用`./go-cqhttp faststart`设置快速启动。 &nbsp;&nbsp;&nbsp;&nbsp;虽然会出现黄色字段，但是不用管，等最后设置好nonebot后，就可以连通了： 1[2022-01-09 01:03:23] [WARNING]: 连接到反向WebSocket Universal服务器 universal: ws://127.0.0.1:8080/onebot/v11/ws 时出现错误: dial tcp: lookup your_websocket_universal.server on 127.0.0.53:53: no such host &nbsp;&nbsp;&nbsp;&nbsp;按下`ctrl+c`结束进程，并输入` cd ~`返回`home`文件夹。 &nbsp;&nbsp;&nbsp;&nbsp;到这，你的`cqhttp`就配置成功了！ ### 配置atri 传送门：atri。 高性能文爱萝卜子，糅杂了各类有趣小功能。 &nbsp;&nbsp;&nbsp;&nbsp;从Github库下载好`ATRI-main.zip`压缩包，或者通过`git clone`来拉取（建议的方法，因为在不修改源码的前提下，可以随时保持更新）， 如果显示zip: command not found.，就需要下载zip功能，命令行敲出sudo apt install zip即可安装。 ![ATRI](https://s2.loli.net/2022/03/05/ZzqD8kUbwloEIKM.png) &nbsp;&nbsp;&nbsp;&nbsp;放进你的服务器目录中，然后通过`unzip ATRI-main.zip`命令解压此压缩包， 我建议把ATRI-main文件夹名称改为atri，以方便后期的调试， {% endnote &nbsp;&nbsp;&nbsp;&nbsp;再通过cd atri进入文件夹，并输入以下命令安装atri所需的依赖： 12python -m pip install --upgrade pip # 升级pip至最新版本pip install -r requirements.txt # 下载 atri 依赖包 &nbsp;&nbsp;&nbsp;&nbsp;安装完依赖之后，再修改下文件夹中的config.yml文件，这里我们只做最初的改动：","categories":[{"name":"robot","slug":"robot","permalink":"https://blog.ciraos.top/categories/robot/"},{"name":"atri","slug":"robot/atri","permalink":"https://blog.ciraos.top/categories/robot/atri/"}],"tags":[{"name":"atri","slug":"atri","permalink":"https://blog.ciraos.top/tags/atri/"},{"name":"robot","slug":"robot","permalink":"https://blog.ciraos.top/tags/robot/"}]},{"title":"你好，世界","slug":"hello-world","date":"2023-06-21T06:30:00.000Z","updated":"2023-06-21T06:30:00.000Z","comments":true,"path":"p/b1d4025b/","link":"","permalink":"https://blog.ciraos.top/p/b1d4025b/","excerpt":"","text":"12345678#include &lt;stdio.h&gt;int main()&#123; printf(&quot;Hello world!\\n&quot;); return 0;&#125;","categories":[{"name":"随笔","slug":"随笔","permalink":"https://blog.ciraos.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"你好，世界","slug":"随笔/你好，世界","permalink":"https://blog.ciraos.top/categories/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.ciraos.top/tags/%E9%9A%8F%E7%AC%94/"},{"name":"你好，世界","slug":"你好，世界","permalink":"https://blog.ciraos.top/tags/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/"}]}],"categories":[{"name":"git","slug":"git","permalink":"https://blog.ciraos.top/categories/git/"},{"name":"git日历","slug":"git/git日历","permalink":"https://blog.ciraos.top/categories/git/git%E6%97%A5%E5%8E%86/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/categories/hexo/"},{"name":"Qexo后台","slug":"hexo/Qexo后台","permalink":"https://blog.ciraos.top/categories/hexo/Qexo%E5%90%8E%E5%8F%B0/"},{"name":"手抄CPrimerPlus","slug":"手抄CPrimerPlus","permalink":"https://blog.ciraos.top/categories/%E6%89%8B%E6%8A%84CPrimerPlus/"},{"name":"第03章数据和c","slug":"手抄CPrimerPlus/第03章数据和c","permalink":"https://blog.ciraos.top/categories/%E6%89%8B%E6%8A%84CPrimerPlus/%E7%AC%AC03%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%92%8Cc/"},{"name":"hexo备份","slug":"hexo/hexo备份","permalink":"https://blog.ciraos.top/categories/hexo/hexo%E5%A4%87%E4%BB%BD/"},{"name":"css学习","slug":"css学习","permalink":"https://blog.ciraos.top/categories/css%E5%AD%A6%E4%B9%A0/"},{"name":"线性渐变","slug":"css学习/线性渐变","permalink":"https://blog.ciraos.top/categories/css%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"},{"name":"c/cplusplus","slug":"c-cplusplus","permalink":"https://blog.ciraos.top/categories/c-cplusplus/"},{"name":"vscode","slug":"c-cplusplus/vscode","permalink":"https://blog.ciraos.top/categories/c-cplusplus/vscode/"},{"name":"fcirlce搭建前端","slug":"hexo/fcirlce搭建前端","permalink":"https://blog.ciraos.top/categories/hexo/fcirlce%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF/"},{"name":"fcirlce搭建后端","slug":"hexo/fcirlce搭建后端","permalink":"https://blog.ciraos.top/categories/hexo/fcirlce%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.ciraos.top/categories/%E7%AC%94%E8%AE%B0/"},{"name":"我想做的一些事情","slug":"笔记/我想做的一些事情","permalink":"https://blog.ciraos.top/categories/%E7%AC%94%E8%AE%B0/%E6%88%91%E6%83%B3%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/"},{"name":"clientworker","slug":"clientworker","permalink":"https://blog.ciraos.top/categories/clientworker/"},{"name":"robot","slug":"robot","permalink":"https://blog.ciraos.top/categories/robot/"},{"name":"atri","slug":"robot/atri","permalink":"https://blog.ciraos.top/categories/robot/atri/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.ciraos.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"你好，世界","slug":"随笔/你好，世界","permalink":"https://blog.ciraos.top/categories/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.ciraos.top/tags/git/"},{"name":"git日历","slug":"git日历","permalink":"https://blog.ciraos.top/tags/git%E6%97%A5%E5%8E%86/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.ciraos.top/tags/hexo/"},{"name":"Qexo后台","slug":"Qexo后台","permalink":"https://blog.ciraos.top/tags/Qexo%E5%90%8E%E5%8F%B0/"},{"name":"第03章数据和c","slug":"第03章数据和c","permalink":"https://blog.ciraos.top/tags/%E7%AC%AC03%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%92%8Cc/"},{"name":"手抄CPrimerPlus","slug":"手抄CPrimerPlus","permalink":"https://blog.ciraos.top/tags/%E6%89%8B%E6%8A%84CPrimerPlus/"},{"name":"hexo备份","slug":"hexo备份","permalink":"https://blog.ciraos.top/tags/hexo%E5%A4%87%E4%BB%BD/"},{"name":"线性渐变","slug":"线性渐变","permalink":"https://blog.ciraos.top/tags/%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"},{"name":"css学习","slug":"css学习","permalink":"https://blog.ciraos.top/tags/css%E5%AD%A6%E4%B9%A0/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.ciraos.top/tags/vscode/"},{"name":"c/cplusplus","slug":"c-cplusplus","permalink":"https://blog.ciraos.top/tags/c-cplusplus/"},{"name":"fcirlce搭建前端","slug":"fcirlce搭建前端","permalink":"https://blog.ciraos.top/tags/fcirlce%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF/"},{"name":"fcirlce搭建后端","slug":"fcirlce搭建后端","permalink":"https://blog.ciraos.top/tags/fcirlce%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.ciraos.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"我想做的一些事情","slug":"我想做的一些事情","permalink":"https://blog.ciraos.top/tags/%E6%88%91%E6%83%B3%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/"},{"name":"clientworker","slug":"clientworker","permalink":"https://blog.ciraos.top/tags/clientworker/"},{"name":"atri","slug":"atri","permalink":"https://blog.ciraos.top/tags/atri/"},{"name":"robot","slug":"robot","permalink":"https://blog.ciraos.top/tags/robot/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.ciraos.top/tags/%E9%9A%8F%E7%AC%94/"},{"name":"你好，世界","slug":"你好，世界","permalink":"https://blog.ciraos.top/tags/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/"}]}